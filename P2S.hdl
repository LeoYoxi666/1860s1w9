CHIP P2S {
    IN indata[4], enable, load;
    OUT sout, complete;

PARTS:
    // 4-bit register to store input data
    Register(in=indata, load=load, out=data);

    // State register (0 = IDLE, 1 = TRANSMITTING)
    DFF(in=next_state, out=current_state);

    // Next state logic
    OR(a=start_transmitting, b=continue_transmitting, out=next_state);
    AND(a=enable, b=NotCurrentState.out, out=start_transmitting);
    AND(a=current_state, b=!is_complete, out=continue_transmitting);
    NOT(in=current_state, out=NotCurrentState.out);

    // 2-bit counter to track transmitted bits
    Register(in=next_count, out=count);
    Inc16(in=count, out=count_inc);
    Mux2(a=0, b=count_inc, sel=current_state, out=next_count);

    // Completion check (count == 3)
    AND(a=count[0], b=count[1], out=is_complete);
    AND(a=current_state, b=is_complete, out=complete);

    // Output selection (bit 0 to 3)
    Mux4(a=data[0], b=data[1], c=data[2], d=data[3], sel=count, out=sout);
}